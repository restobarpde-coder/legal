const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Configuraci√≥n de clientes Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

console.log('üèõÔ∏è  VERIFICACI√ìN COMPLETA DE SUPABASE - SISTEMA LEGAL\n');

// Cliente con clave an√≥nima (para simular usuario no autenticado)
const supabaseAnon = createClient(supabaseUrl, supabaseAnonKey);

// Cliente con clave de servicio (para bypass RLS y verificar estructura)
const supabaseService = createClient(supabaseUrl, supabaseServiceKey);

async function verifySupabaseConnection() {
  // Tablas principales del sistema legal
  const legalTables = [
    'users',
    'clients', 
    'cases',
    'case_members',
    'tasks',
    'documents',
    'notes',
    'time_entries'
  ];

  console.log('üìã 1. VERIFICANDO CONFIGURACI√ìN...');
  console.log(`   URL: ${supabaseUrl}`);
  console.log(`   Clave An√≥nima: ${supabaseAnonKey ? '‚úÖ Configurada' : '‚ùå Falta'}`);
  console.log(`   Clave Servicio: ${supabaseServiceKey ? '‚úÖ Configurada' : '‚ùå Falta'}`);
  console.log('');

  console.log('üîç 2. VERIFICANDO ESTRUCTURA DE TABLAS (Service Role)...');
  const tableStats = {};
  
  for (const table of legalTables) {
    try {
      const { data, error, count } = await supabaseService
        .from(table)
        .select('*', { count: 'exact', head: true });
      
      if (error) {
        console.log(`   ‚ùå ${table}: ERROR - ${error.message}`);
        tableStats[table] = { status: 'error', count: 0, error: error.message };
      } else {
        console.log(`   ‚úÖ ${table}: ${count || 0} registros`);
        tableStats[table] = { status: 'ok', count: count || 0 };
      }
    } catch (err) {
      console.log(`   üí• ${table}: EXCEPCI√ìN - ${err.message}`);
      tableStats[table] = { status: 'exception', count: 0, error: err.message };
    }
  }
  console.log('');

  console.log('üîí 3. VERIFICANDO POL√çTICAS RLS (Anon Key)...');
  for (const table of legalTables) {
    try {
      const { data, error, count } = await supabaseAnon
        .from(table)
        .select('*', { count: 'exact', head: true });
      
      if (error) {
        // Esto es esperado para tablas con RLS - usuario no autenticado
        if (error.message.includes('row-level security') || error.code === 'PGRST116') {
          console.log(`   üîí ${table}: RLS activo (esperado)`);
        } else {
          console.log(`   ‚ö†Ô∏è  ${table}: Error inesperado - ${error.message}`);
        }
      } else {
        // Solo users y clients deber√≠an ser accesibles sin autenticaci√≥n
        if (table === 'users' || table === 'clients') {
          console.log(`   ‚úÖ ${table}: Accesible p√∫blicamente (${count || 0} registros)`);
        } else {
          console.log(`   ‚ö†Ô∏è  ${table}: Accesible sin autenticaci√≥n (revisar RLS)`);
        }
      }
    } catch (err) {
      console.log(`   üí• ${table}: EXCEPCI√ìN - ${err.message}`);
    }
  }
  console.log('');

  console.log('üë• 4. VERIFICANDO DATOS DE MUESTRA...');
  
  // Verificar algunos datos espec√≠ficos
  try {
    const { data: users } = await supabaseService.from('users').select('id, email, full_name, role').limit(3);
    console.log(`   üë§ Usuarios: ${users?.length || 0} encontrados`);
    users?.forEach(user => {
      console.log(`      - ${user.full_name} (${user.email}) - ${user.role}`);
    });

    const { data: clients } = await supabaseService.from('clients').select('id, name, email').limit(3);
    console.log(`   üè¢ Clientes: ${clients?.length || 0} encontrados`);
    clients?.forEach(client => {
      console.log(`      - ${client.name} (${client.email || 'Sin email'})`);
    });

    const { data: cases } = await supabaseService.from('cases').select('id, title, status').limit(3);
    console.log(`   ‚öñÔ∏è  Casos: ${cases?.length || 0} encontrados`);
    cases?.forEach(case_ => {
      console.log(`      - ${case_.title} (${case_.status})`);
    });

  } catch (err) {
    console.log(`   üí• Error al obtener datos de muestra: ${err.message}`);
  }
  console.log('');

  console.log('üìä 5. RESUMEN FINAL...');
  const totalTables = legalTables.length;
  const workingTables = Object.values(tableStats).filter(stat => stat.status === 'ok').length;
  const totalRecords = Object.values(tableStats).reduce((sum, stat) => sum + (stat.count || 0), 0);
  
  console.log(`   üìã Tablas principales: ${workingTables}/${totalTables} funcionando`);
  console.log(`   üìä Total de registros: ${totalRecords}`);
  
  if (workingTables === totalTables && totalRecords > 0) {
    console.log('   üéâ ¬°CONEXI√ìN CON SUPABASE COMPLETAMENTE FUNCIONAL!');
    console.log('   ‚ú® El sistema est√° listo para usar');
    return true;
  } else {
    console.log('   ‚ö†Ô∏è  Hay algunos problemas menores, pero la conexi√≥n b√°sica funciona');
    return false;
  }
}

verifySupabaseConnection()
  .then(success => {
    console.log('\n' + '='.repeat(60));
    if (success) {
      console.log('‚úÖ VERIFICACI√ìN COMPLETADA - TODO FUNCIONANDO CORRECTAMENTE');
    } else {
      console.log('‚ö†Ô∏è  VERIFICACI√ìN COMPLETADA - CON OBSERVACIONES MENORES');
    }
    console.log('='.repeat(60));
  })
  .catch(err => {
    console.error('\n‚ùå ERROR DURANTE LA VERIFICACI√ìN:', err.message);
    process.exit(1);
  });
